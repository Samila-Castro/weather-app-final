import { ChangeEvent, SetStateAction, useEffect, useState } from "react";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Card from "@/components/Card/Card";

import Umidity from "@/public/umidity.svg";
import WindSpeed from "@/public/windSpeed.svg";
import Sunrise from "@/public/sunrise.svg";
import Sunset from "@/public/sunset.svg";
import Visibility from "@/public/visibility.svg";
import Compass from "@/public/compass.svg";

import {
  Container,
  CustomProvider,
  IconButton,
  Input,
  InputGroup,
  Loader,
  Message,
} from "rsuite";
import SearchIcon from "@rsuite/icons/Search";
import { BsPinFill } from "react-icons/bs";
import { api } from "../services/api";
import Header from "@/components/Header/Header";
import React from "react";

interface StateProps {
  location: {
    name: string;
    country: string;
    localtime: string;
  };
  current: {
    temp_c: string;
    feelslike_c: string;
    vis_km: string;
    wind_dir: string;
    wind_kph: string;
    condition: {
      text: string;
      icon: string;
    };

    humidity: string;
  };
}

interface AstronomyDataProps {
  astronomy: {
    astro: {
      sunrise: string;
      sunset: string;
    };
  };
}

export default function Home() {
  const [state, setState] = useState<StateProps>();
  const [astronomyData, setStateAstronomy] = useState<AstronomyDataProps>();
  const [lastInput, setLastInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [favorites, setFavorites] = useState(["Crateús"]);
  const [theme, setTheme] = useState("light");
  const [showWarning, setShowWarning] = React.useState(false);
  const [showError, setShowError] = React.useState(false);

  const handleTheme = (value: boolean) => {
    if (value) setTheme("dark");
    else {
      setTheme("light");
    }
  };
  const callAPI = (inputValue: string) => {
    if (inputValue === "") {
      setShowWarning(true);
      return;
    }

    setLoading(true);
    setLastInput(inputValue);
    api
      .get(`/current.json?key=d724e512212e458eb97213108231104&q=${inputValue}`)
      .then((response) => {
        const result = response.data;
        setState(result);
        setLoading(false);
      })
      .catch((e) => {
        setShowError(true);
      });

    api
      .get(
        `/astronomy.json?key=d724e512212e458eb97213108231104&q=${inputValue}`
      )
      .then((response) => {
        const astronomyData = response.data;
        setStateAstronomy(astronomyData);
        setLoading(false);
      })
      .catch((e) => {
        setShowError(true);
        setLoading(false);
      });
  };

  const handleNewCityFavorite = () => {
    setFavorites((oldState) => [...oldState, lastInput]);
  };

  const handleDeleteCityButton = (item: string) => {
    const filter = favorites.filter((city) => city !== item);
    setFavorites(filter);
  };

  const formatDayAnHour = (date?: string) => {
    if (!date) return "";
    const currentDate = new Date(date);
    const week = currentDate.toLocaleDateString("default", {
      weekday: "long",
    });
    const time = `${currentDate.getHours()}:${currentDate.getMinutes()}`;
    return `${week}, ${time}`;
  };

  return (
    <CustomProvider theme={theme}>
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/weather.svg" />
      </Head>
      <Header
        dropdonw={favorites}
        toggletheme={handleTheme}
        call={callAPI}
        handleDeleteCity={handleDeleteCityButton}
      />
      {showWarning && (
        <Message showIcon type="warning" closable>
          Enter a valid city name
        </Message>
      )}
      {showError && (
        <Message type="error" closable>
          This city doesn't exist
        </Message>
      )}
      {!!loading && (
        <Loader backdrop content="loading data..." vertical size="lg" />
      )}
      {!loading && !!astronomyData && (
        <div className={styles.homeWrapper}>
          <div
            className={theme === "dark" ? styles.mainSideDark : styles.mainSide}
          >
            <div className={styles.pinBox}>
              <IconButton
                size="sm"
                icon={<BsPinFill />}
                onClick={(e) => {
                  handleNewCityFavorite();
                }}
              />
            </div>
            <div>
              <h2>{state?.location.name},</h2>
              <h4>{state?.location.country}</h4>
            </div>
            <h6>{state?.current.condition.text}</h6>
            <div>
              <img src={state?.current.condition.icon} alt="Imagem" />
            </div>
            <h1>{state?.current.temp_c}°C</h1>
            <p>Feels like {state?.current.feelslike_c}°C</p>
          </div>
          <div
            className={theme === "dark" ? styles.infoSideDark : styles.infoSide}
          >
            <div className={styles.header}>
              <h4>{formatDayAnHour(state?.location.localtime)}</h4>
            </div>
            <div className={styles.metrics}>
              <Card
                image_path={Umidity}
                title="Umidity"
                value={state?.current.humidity}
                unity="%"
              />
              <Card
                image_path={WindSpeed}
                title="Wind speed"
                unity="km"
                value={`${state?.current.wind_kph}`}
              />
              <Card
                image_path={Compass}
                title="Wind direction"
                value={`${state?.current.wind_dir}`}
              />
              <Card
                image_path={Visibility}
                title="Visibility"
                unity="km"
                value={`${state?.current.vis_km}`}
              />
              <Card
                image_path={Sunrise}
                title="Sunrise"
                value={`${astronomyData?.astronomy.astro.sunrise}`}
              />
              <Card
                image_path={Sunset}
                title="Sunset"
                value={`${astronomyData?.astronomy.astro.sunset}`}
              />
            </div>
          </div>
        </div>
      )}
    </CustomProvider>
  );
}
